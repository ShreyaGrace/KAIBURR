/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Server;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-09-10T13:14:27.240047755Z[GMT]")
@Validated
public interface ServersApi {

    @Operation(summary = "Delete a server", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Server deleted successfully"),
        
        @ApiResponse(responseCode = "404", description = "Server not found") })
    @RequestMapping(value = "/servers",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> serversDelete(@Parameter(in = ParameterIn.QUERY, description = "The id of the server to delete" ,schema=@Schema()) @Valid @RequestParam(value = "id", required = false) String id);


    @Operation(summary = "Find servers by name", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Servers found successfully"),
        
        @ApiResponse(responseCode = "404", description = "Server not found") })
    @RequestMapping(value = "/servers/find",
        method = RequestMethod.GET)
    ResponseEntity<Void> serversFindGet(@Parameter(in = ParameterIn.QUERY, description = "The name of the server to find" ,schema=@Schema()) @Valid @RequestParam(value = "name", required = false) String name);


    @Operation(summary = "Get all servers or a specific server by id", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Servers retrieved successfully"),
        
        @ApiResponse(responseCode = "404", description = "Server not found") })
    @RequestMapping(value = "/servers",
        method = RequestMethod.GET)
    ResponseEntity<Void> serversGet(@Parameter(in = ParameterIn.QUERY, description = "The id of the server to retrieve" ,schema=@Schema()) @Valid @RequestParam(value = "id", required = false) String id);


    @Operation(summary = "Create a server", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Server created successfully") })
    @RequestMapping(value = "/servers",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> serversPut(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Server body);

}

